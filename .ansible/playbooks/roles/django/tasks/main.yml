---
- file:
    state: directory
    mode: "2751"
    path: "{{item}}"
  loop:
  - "{{cops_django_dir}}"
  - "{{cops_django_dir}}/local/postgresql/data"
  - "{{cops_django_dir}}/local/backup"
  - "{{cops_django_dir}}/local/backup/data"
  - "{{cops_django_dir}}/local/backup/setup"
  tags: [django_layout_dirs]
- name: Synchronise files inside the environment (deleguation)
  delegate_to: "localhost"
  synchronize:
    compress: false
    ssh_args: "{{cops_django_sshargs}}"
    src: "{{cops_django_code_dir}}"
    dest: "{{cops_django_dir}}/"
    rsync_opts: "{{cops_django_code_rsync_opts}}"
    set_remote_user: "no"
    #update_opts: '--recursive'
  tags: [django_sync, django_sync_code]
- include_tasks: sync_content.yml
  when: cops_django_sync_theme_contents|length|copsf_asbool
  loop: "{{cops_django_sync_theme_contents|dict2items}}"
  tags: [django_sync, django_sync_theme]
- template:
    src: "dbsmartbackup.yml"
    dest: "{{cops_django_dir}}/local/backup/setup/reconfigure.yml"
    mode: "0640"
    trim_blocks: false
  tags: [django_conf]
- template:
    src: "local.py"
    dest: "{{cops_django_dir}}/local.py"
    mode: "0644"
    trim_blocks: false
  tags: [django_conf]
- template:
    src: "docker.env"
    dest: "{{cops_django_dir}}/docker.env"
    mode: "0640"
    force: true
    trim_blocks: false
  tags: [django_conf]
- blockinfile:
    create: true
    path: "{{cops_django_dir}}/.env"
    content: |-
      {{cops_django_dotenv}}
    marker: "# ANSIBLE MANAGED BLOCK :: deploy commit :: {mark}"
  tags: [django_conf]
- include_tasks: docker_login.yml
  loop: "{{cops_django_registries}}"
  tags: [django_docker, django_docker_login]
- shell: |
    set -ex
    cd "{{cops_django_dir}}"
    {{cops_django_dc}} build {{cops_django_build_args}}
  when:
  - "cops_django_build|copsf_asbool"
  - "cops_django_build_args|copsf_asbool"
  tags: [django_docker, django_docker_build]
# ensure all images are (re) pulled
- shell: |
    set -ex
    cd "{{cops_django_dir}}"
    {{cops_django_dc}} pull
  retries: 5
  delay: 10
  when:
  - "cops_django_pull|copsf_asbool"
  tags: [django_docker, django_docker_pull]
- include_role: {name: corpusops.roles/docker_compose_service}
  vars:
    _docker_compose_service:
      working_directory: "{{cops_django_dir}}"
      files: "{{cops_django_compose_files}}"
      project: "{{cops_django_servicename}}"
      restart: "on-failure"
  tags: [django_service_register, django_service, service]
# ensure manually handled services are booted
# to handle sidekar volumes refresh accuratly
- shell: |
    set -ex
    cd "{{cops_django_dir}}"
    {% for i in cops_django_restarted_services.split() %}
    has_service() { {{cops_django_dc}} config |grep -qE "^  ${1}:"; }
    if ( has_service {{i}} );then
    ret=
    for i in $(seq 30);do
      if ( {{cops_django_dc}} ps --services \
           --filter status=running | grep -E -q "^{{i}}$");then
        {{cops_django_dc}} up -d --no-deps --remove-orphans --force-recreate {{i}}
        ret=$?
      else
        {{cops_django_dc}} up -d --no-deps --remove-orphans {{i}}
      fi
      if [ "x$ret" = "x0" ];then break;fi
      sleep 1
    done
    if [ "x$ret" != "x0" ];then echo "{{i}}: failed restart";exit 1;fi
    fi
    {% endfor %}
  tags: [django_service_restart, django_service, service]
- shell: |
    set -ex
    cd "{{cops_django_dir}}"
    has_service() { {{cops_django_dc}} config |grep -qE "^  +${1}:"; }
    {% for i in cops_django_restarted_services.split()|reverse %}
    if ( has_service {{i}} );then
    {{cops_django_dc}} ps --services --filter status=running | grep -E -q "^{{i}}$"
    fi
    {% endfor %}
  retries: 60
  delay: 1
  register: restarted_docker_services
  until: "restarted_docker_services.rc == 0"
  tags: [django_service_restart, django_service, service]
